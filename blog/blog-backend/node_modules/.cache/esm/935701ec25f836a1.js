let Joi,User;_25f‍.x([["register",()=>register],["login",()=>login],["check",()=>check],["logout",()=>logout]]);_25f‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_25f‍.w("../models/user",[["default",["User"],function(v){User=v}]]);


       const register = async ctx => {
	const schema = Joi.object().keys({
		username : Joi.string()
			.alphanum()
			.min(3)
			.max(20)
			.required(),
		password : Joi.string().required()	
	});

	const result = schema.validate(ctx.request.body);
	if(result.error) {
		ctx.status = 400;
		ctx.body = result.error;
		return;
	}

	const { username, password } = ctx.request.body;
	try {
		const exists = await User.findByUsername(username);
		if (exists) {
			ctx.status = 409;
			return;
		}

		const user = new User({
			username
		});
		await user.setPassword(password);
		await user.save();

		ctx.body = user.serialaize();
	} catch (e) {
		ctx.throw(500, e);
	}
};

       const login = async ctx => {};

       const check = async ctx => {};

       const logout = async ctx => {};